Client:



Log



client.load_script("Autobuy")
client.log("i loaded script!")\



Unload script



client.unload_script("Autobuy")
client.unload_script("Watermark")



Load script



client.load_script("Autobuy")
client.load_script("Watermark")



Callback



on_shot - when aimbot is firing
on_paint - hook to draw something..
on_createmove - tick processing hook
local function draw()
-- draw something
end
client.add_callback("on_paint", draw)
local function createmove_func()
-- do something
end
client.add_callback("on_createmove", createmove_func)
local function shot(shot_info)
local result = shot_info.result
if result == "Hit" then
client.log("Hitted")
end
end
client.add_callback("on_shot", shot)




events:



Register event



local function hurt(event)
-- some code
end



events.register_event("player_hurt", hurt)
Some extra information



game_event:get_bool
game_event:get_int
game_event:get_float
game_event:get_string
game_event:set_bool
game_event:set_int
game_event:set_float
game_event:set_string
All events you find in there



https://wiki.alliedmods.net/Counter-Strike:_Global_Offensive_Events




console:



Set string



console.set_string("name", "noname")
Set float



console.set_float("zoom_sensitivity_ratio_mouse", 0.0)
Set int



console.set_int("custom_var", 2)
Set bool



console.set_bool("crosshair", false)
Get string



local lc_name = console.get_string("name")
Get float



local volume = console.get_float("volume")
Get int



local bomb_time = console.get_int("mp_c4timer")
Get bool



local can_drop = console.get_bool("mp_drop_knife_enable")
Execute command



local function shot(shot_info)
local result = shot_info.result
if result == "Hit" and shot_info.server_damage >= 100 then
console.execute("say 1")
end
end
client.add_callback("on_shot", shot)




globals:



Get Tickrate



local get_tickrate = globals.get_tickrate()



Max clients



local max_clients = globals.get_maxclients()
Internal per tick



local pertick = globals.get_intervalpertick()
Framecount



local framecount = globals.get_framecount()
Tickcount



local ticks = globals.get_tickcount()
Frametime



local frametime = globals.get_frametime()
Curtime



local curtime_float = globals.get_curtime()
Realtime



local realtime_float = globals.get_realtime()
Username



local user = globals.get_username()
Time



local time = globals.get_time()
Server IP



local address = globals.get_server_address()
Ping



local ping = globals.get_ping()
Framerate



local framerate = globals.get_framerate()




cmd:



Set button state



local function duck()
cmd.set_button_state(buttons.in_duck, true)
end



client.add_callback("on_createmove", duck)
Button state



local function draw()
if cmd.get_button_state(buttons.in_use) then
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)
Choked commands



local function draw()
local font = render.create_font("Verdana", 12, 600, true, true, true)
render.draw_text(font, 100, 100, color.new(255, 0, 0), tostring(cmd.get_choke()))
end



client.add_callback("on_paint", draw)
Send packet



local function draw()
if cmd.get_send_packet() then
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)




engine:



is HLTV



local function draw()
if engine.is_hltv() then
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)
Taking screenshot



local function draw()
if not engine.is_taking_screenshot() then
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)
Pause



local function draw()
if engine.is_pausedthen
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)
Recording demo



local function draw()
if engine.is_recording_demo() then
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)
Playing demo



local function draw()
if engine.is_playing_demo() then
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)
Map group name



local function draw()
local font = render.create_font("Verdana", 12, 600, true, true, true)
render.draw_text(font, 100, 100, color.new(255, 0, 0), tostring(engine.get_map_group_name()))
end



client.add_callback("on_paint", draw)
Short map name



local function draw()
local font = render.create_font("Verdana", 12, 600, true, true, true)
render.draw_text(font, 100, 100, color.new(255, 0, 0), tostring(engine.get_level_name_short()))
end



client.add_callback("on_paint", draw)
Map name



local function draw()
local font = render.create_font("Verdana", 12, 600, true, true, true)
render.draw_text(font, 100, 100, color.new(255, 0, 0), tostring(engine.get_level_name()))
end



client.add_callback("on_paint", draw)
Connected



local function draw()
if engine.is_connected() then
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)
In game



local function draw()
if engine.is_in_game() then
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end
end



client.add_callback("on_paint", draw)
Set view angles



local function cm()
local viewangles = engine.get_view_angles()
engine.set_view_angles(vector.new(viewangles.x, viewangles.y + 180.0, viewangles.z))
end



client.add_callback("on_createmove", cm)
View angles



local function cm()
local viewangles = engine.get_view_angles()
end



client.add_callback("on_createmove", cm)
Local index



local function draw()
local player = engine.get_player_for_user_id(1)
local me = engine.get_local_player_index()
if player ~= me then
-- something
end
end



client.add_callback("on_paint", draw)
Player for user ID



local function draw()
local player = engine.get_player_for_user_id(1)
local me = engine.get_local_player_index()
if player ~= me then
-- something
end
end



client.add_callback("on_paint", draw)
Screen width



local function screen_sizes()
local screen_width = render.get_screen_width()
local screen_height = render.get_screen_height()
end



client.add_callback("on_paint", screen_sizes)
Screen height



local function screen_sizes()
local screen_width = render.get_screen_width()
local screen_height = render.get_screen_height()
end



client.add_callback("on_paint", screen_sizes)




render:



World to screen



local function draw()
local font = render.create_font("Verdana", 12, 600, true, true, true)
local random_origin = render.world_to_screen(vector.new(1400, 600, 200))
render.draw_text(font, random_origin.x , random_origin.y , color.new(255, 0, 0), tostring(engine.get_level_name))
end



client.add_callback("on_paint", draw)
Text width



local function draw()
local font = render.create_font("Verdana", 12, 600, true, true, true)
local padding = render.text_width(font, "Hello")
end



client.add_callback("on_paint", draw)
Triangle



local function draw()
render.draw_triangle(100, 100, 120, 90, 80, 90, color.new(255, 0, 0))
end



client.add_callback("on_paint", draw)
Filled circle



local function draw()
render.draw_circle_filled(100, 100, 30, 60, color.new(255, 0, 0))
end



client.add_callback("on_paint", draw)
Circle



local function draw()
render.draw_circle(100, 100, 30, 60, color.new(255, 0, 0))
end



client.add_callback("on_paint", draw)
Gradient



local function draw()
render.draw_rect_filled_gradient(100, 100, 150, 30, color.new(255, 0, 0), color.new(0, 255, 0), 1)
end



client.add_callback("on_paint", draw)




Centered text



local function draw()
local font = render.create_font("Verdana", 12, 600, true, true, true)
render.draw_text_centered(font, 100, 100, color.new(255, 0, 0), true, true, "Hello, world!")
end



client.add_callback("on_paint", draw)
Text



local function draw()
local font = render.create_font("Verdana", 12, 600, true, true, true)
render.draw_text(font, 100, 100, color.new(255, 0, 0), "Hello, world!")
end



client.add_callback("on_paint", draw)
Create font



local function draw()
render.create_font("Verdana", 12, 600, true, true, true)
end



client.add_callback("on_paint", draw)
Filled rectangle



local function rectangle()
render.draw_rect_filled(10, 10, 100, 100, color.new(150, 150, 200))
end



client.add_callback("on_paint", rectangle)
Rectangle



local function rectangle()
render.draw_rect(10, 10, 100, 100, color.new(150, 150, 200))
end



client.add_callback("on_paint", rectangle)




Line



local function draw_line()
render.draw_line(10, 10, 150, 150, color.new(0, 0, 255))
end



client.add_callback("on_paint", draw_line)




menu:



Keybind mode



local type = menu.get_key_bind_mode(key_binds.body_aim)
Hold - 0;
Toggle - 1;
Set color



menu.set_color("Player.fake_chams_color", color.new(255, 255,
255, 50))
Set float



menu.set_float("Esp.asus_props_amount", 0.5)
Set int



menu.set_int("Ragebot.fov", 180)
Set bool



menu.set_bool("Ragebot.enable", true)
Get keybind state



if menu.get_key_bind_state(key_binds.body_aim) then
-- ...
end
Get color



local color = menu.get_color("Line color")
Get float slider



if menu.get_float("Desync angle") > 0 then
-- ...
end
Int value



if menu.get_int("Flags") == 1 then
-- ...
end
Checkbox state



if menu.get_bool("Enable line") then
-- ...
end
Color picker



menu.add_color_picker("Line color")
Float slider



menu.add_slider_float("Desync angle", 0.0, 58.0)
Int slider



menu.add_slider_int("FOV", 0, 180)
Combobox



menu.add_combo_box("Flags", { "LC", "Money", "Air" })
Checkbox



menu.add_check_box("Enable line")
Next line



menu.add_check_box("Enable gradient line")
menu.next_line()
menu.add_color_picker("Color 1")
menu.add_color_picker("Color 2")
Set menu visibility



if not menu.get_visible() then
menu.set_visible(true)
end
Menu visibility



-- unclosable menu
if not menu.get_visible() then
menu.set_visible(true)
end




entity:



SetProp



local lc_player = entitylist.get_local_player()
lc_player:set_prop_bool("CBaseEntity", "m_bSpotted", true)
//
set_prop_int
set_prop_float
set_prop_bool
//
GetProp



local lc_player = entitylist.get_local_player()
local tickbase = lc_player:get_prop_int("CBasePlayer", "m_nTickBase")
//
get_prop_int
get_prop_float
get_prop_bool
get_prop_string
//
Get player



local function test()
for i = 0, 64 do
local e = entitylist.get_player_by_index(i)
if e ~= nil and e:get_alive() then
client.log("index " .. tostring(i) .. " alive" )
end
end
end



client.add_callback("on_createmove", test)
//
get_index - returns entity index (int)
get_dormant - returns dormant state (true/false)
get_team - returns team number (int)
get_alive - returns entitie's lifestate (true/false)
get_velocity - returns entitie's velocity (vector)
get_origin - returns entitie's abs origin (vector)
get_angles - returns entitie's eye angles (vector)
get_hitbox_position(i) - returns entitie's hitbox position (vector)
has_helmet - returns entitie's helmet exist (true/false)
has_heavy_armor - returns entitie's heavy armor exist (true/false)
is_scoped - returns entitie's scoped state (true/false)
get_health - returns entitie's helath (int)
//
Local player



local function arty_gay()
local lc_player = entitylist.get_local_player()
local index = lc_player:get_index()
end



client.add_callback("on_createmove", createmove)
//
get_index - returns entity index (int)
get_dormant - returns dormant state (true/false)
get_team - returns team number (int)
get_alive - returns entitie's lifestate (true/false)
get_velocity - returns entitie's velocity (vector)
get_origin - returns entitie's abs origin (vector)
get_angles - returns entitie's eye angles (vector)
get_hitbox_position(i) - returns entitie's hitbox position (vector)
has_helmet - returns entitie's helmet exist (true/false)
has_heavy_armor - returns entitie's heavy armor exist (true/false)
is_scoped - returns entitie's scoped state (true/false)
get_health - returns entitie's helath (int)
//




weapon:



Get weapon



local function test()
for i = 0, 64 do
local e = entitylist.get_player_by_index(i)
if e ~= nil and e:get_alive() then
local weapon = entitylist.get_weapon_by_player(e)
local weapon_name = weapon:get_name()
client.log("index " .. tostring(i) .. " has" .. weapon_name)
end
end
end



client.add_callback("on_createmove", test)
Other



is_empty - returns true, if weapon doesnt have ammo (true/false)
can_fire - returns true, if weapon can fire (true/false)
is_non_aim - returns true, if weapon cant shoot (knife/zeus/grenade) (true/false)
can_double_tap - returns true, if weapon can double tap (true/false)
get_name - returns weapon name (string)




indicators:



Add positioned indicator



local function add_indicator()
indicator.add_position("Red I(first)", color.new(255, 0, 0, 255), 1)
end



client.add_callback("on_paint", add_indicator)
Add indicator



local function add_indicator()
indicator.add("Red I", color.new(255, 0, 0, 255))
end



client.add_callback("on_paint", add_indicator)




utils:



Find signature



local ffi = require("ffi")



ffi.cdef[[
typedef int(__fastcall* clantag_t)(const char*, const char*);
]]



local fn_change_clantag
local set_clantag



local function clantag()
if (fn_change_clantag == nil) then
fn_change_clantag = utils.find_signature("engine.dll", "53 56 57 8B DA 8B F9 FF 15")
  end



  if ((set_clantag == nil) and (fn_change_clantag ~= nil)) then
set_clantag = ffi.cast("clantag_t", fn_change_clantag)
  end



  local choke = cmd.get_choke()



  if (choke == 0) then
set_clantag("132", "312")
end
end



client.add_callback("on_createmove", clantag)
